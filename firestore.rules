rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to access their own documents (UID-based)
    match /khatas/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to access their own documents (email-based)
    match /khatas/{userEmail} {
      allow read, write: if request.auth != null && request.auth.token.email == userEmail;
    }
    
    // Allow access to shared documents (by email in sharedWith array)
    match /khatas/{document} {
      allow read, write: if request.auth != null && 
        resource != null &&
        (resource.data.keys().hasAny(['sharedWith']) && 
         request.auth.token.email in resource.data.sharedWith);
    }
    
    // Sharing invitation system
    match /sharing_invitations/{invitationId} {
      allow read, write: if request.auth != null;
    }
    
    // Shared accounts - users can access their own shared account data
    match /shared_accounts/{ownerUid}/members/{memberId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == ownerUid || request.auth.uid == memberId);
    }
    
    // Member accounts - users can access their own member account data
    match /member_accounts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow users to access their own transactions
    match /users/{userId}/transactions/{transactionId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Debug rule - allow all authenticated users (TEMPORARY - remove in production)
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}